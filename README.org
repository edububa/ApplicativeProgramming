* Applicative programming with effects

  This a little summary of the paper /Applicative programming with
  effects/, it also adds some interesting content as ~QuickCheck~
  libraries to test abstractions in Haskell.

  The slides used in the ACM UPM talk about applicative functors can
  be found in the folder ~slides~ which contains the ~.tex~ file and
  the slides in ~PDF~ format. If you want the code here presented and
  used in the presentation just create a ~src~ directory in the root
  of the project and generate it just by ~C - c C - v t~ inside Emacs.

** Why would you need Applicative functors?

   When we are dealing with functors sometimes we have this kind of
   structure:

   #+BEGIN_SRC text :tangle "./src/intro.txt"
Prelude> f a b c = a + b + c
Prelude> :t f <$> [1,2,3]
f <$> [1,2,3] :: Num a => [a -> a -> a]
Prelude> :t f <$> [1,2,3]
f <$> [1,2,3] :: Num a => [a -> a -> a]
Prelude>
   #+END_SRC

   When we find a type like this:

#+BEGIN_SRC haskell :tangle "./src/intro_type.hs"
t :: f (a -> b)
#+END_SRC

   What we usually need to compute it is an ~Applicative~ functor.

   Let's see what an ~Applicative~ functor is and how can we use it!

** Introduction

   #+BEGIN_QUOTE
   This is the story of a pattern that popped up time and again in our
   daily work, programming in Haskell, until the temptation to abstract
   it became irresistible. -- Simon Peyton Jones
   #+END_QUOTE
*** /Sequencing commands/

    Sequencing commands and collect the results is a very common
    pattern in programming, in Haskell Prelude we can find the
    ~sequence~ function which type is:

    #+BEGIN_SRC haskell :tangle "./src/sequence_type.hs"
sequence :: (Monad m, Traversable t) => t (m a) -> m (t a)
sequence :: (Monad m) => [m a] -> m [a]
sequence :: [IO a] -> IO [a]
    #+END_SRC

    an example of an implementation of this function could be:

    #+BEGIN_SRC haskell :tangle "./src/sequence.hs"
sequence :: [IO a] -> IO [a]
sequence []     = return []
sequence (c:cs) = do
  x  <- c
  xs <- sequence cs
  return (x:xs)
    #+END_SRC

    The ~Monad~ library provides us a function that will help us to
    rewrite the ~sequence~ function in a much easier to read version:

    This is the ~ap~ function:

    #+BEGIN_SRC haskell :tangle "./src/ap.hs"
ap :: Monad m => m (a -> b) -> m a -> m b
ap mf mx = do
  f <- mf
  x <- mx
  return (f x)
    #+END_SRC

    and with it we can rewrite sequence as:

    #+BEGIN_SRC haskell :tangle "./src/sequence1.hs"
sequence :: [IO a] -> IO [a]
sequence []     = return []
sequence (c:cs) = return (:) `ap` c `ap` sequence cs
    #+END_SRC

    This sequence function is now written in what we will call
    applicative style.

*** Transposing 'matrices'

    We can think of matrices as somehow lists of lists. A very common
    operation over matrices is transposition:

    #+BEGIN_SRC haskell :tangle "./src/transpose.hs"
transpose :: [[a]] -> [[a]]
transpose []       = repeat []
transpose (xs:xss) = zipWith (:) xs (transpose xss)
    #+END_SRC

    For implementing transposition we use two external functions,
    ~repeat~ and ~zipWith~.

    ~repeat~ is just a function that takes something and creates an
    infinite list with it.

    #+BEGIN_SRC haskell :tangle "./src/repeat.hs"
repeat :: a -> [a]
repeat x = x : repeat x
    #+END_SRC

    If we implement a function ~zapp~ that makes some kind of 'zippy'
    application:

    #+BEGIN_SRC haskell :tangle "./src/zapp.hs"
zapp :: [a -> b] -> [a] -> [b]
zapp (f:fs) (x:xs) = f x : zapp fs xs
zapp _      _      = []
    #+END_SRC

    We can rewrite our transpose function in a very interesting way:

    #+BEGIN_SRC haskell :tangle "./src/transpose1.hs"
transpose :: [[a]] -> [[a]]
transpose []       = repeat []
transpose (xs:xss) = repeat (:) `zapp` xs `zapp` transpose xss
    #+END_SRC

    This way of rewriting the ~transpose~ function again leads to a
    definition in applicative style.

*** Comparison between the functions

    If we take all this functions side by side we can see a pattern,
    first of all, we will take a look at their types:

    #+BEGIN_SRC haskell :tangle "./src/comparison_types.hs"
sequence :: [IO a] -> IO [a]

transpose :: [[a]] -> [[a]]
    #+END_SRC

    and now let's take a look at their implementation:

    #+BEGIN_SRC haskell :tangle "./src/comparison_impl.hs"
sequence []     = return []
sequence (c:cs) = return (:) `ap` c `ap` sequence cs

transpose []       = repeat []
transpose (xs:xss) = repeat (:) `zapp` xs `zapp` transpose xss
    #+END_SRC

    we can see some relation in the application function all of them
    use, if we look at their types:

    #+BEGIN_SRC haskell :tangle "./src/comparison_types_ap.hs"
ap :: Monad m => m (a -> b) -> m a -> m b
zapp ::            [a -> b] -> [a] -> [b]
    #+END_SRC

    So we can define a more general type for abstracting this kind of
    computations we can obtain the "apply" function:

    #+BEGIN_SRC haskell :tangle "./src/apply_type.hs"
(<*>) :: f (a -> b) -> f a -> f b
    #+END_SRC

    This pattern will lead us to the creation of the ~Applicative~
    type class, so we can exploit this pattern of computation.

** The Applicative class

   #+BEGIN_SRC haskell :tangle "./src/applicative.hs"
class Applicative f where
  pure  :: a -> f a
  (<*>) :: f (a -> b) -> f a -> f b
   #+END_SRC

   We can easily check that applicative functors are indeed functors
   by implementing the ~fmap~ operation in terms of applicative
   operations:

   #+BEGIN_SRC haskell :tangle "./src/fmap.hs"
(<$>) :: Applicative f => (a -> b) -> f a -> f b
f <$> u = pure f <*> u
   #+END_SRC

   Any expression built from Applicative combinators can be
   transformed to a canonical form in which a single pure function is
   'applied' to the effectful parts in depth-first order:

   #+BEGIN_SRC text :tangle "./src/canonical.txt"
pure f <*> u_1 <*> ... <*> u_n
   #+END_SRC

   We also can transform any monad into an aplicative, we just have
   to take:

   #+BEGIN_SRC haskell :tangle "./src/to_monad.hs"
pure  = return
(<*>) = ap

   #+END_SRC

   Now we will write our ~Applicative~ instance for the previous
   examples:

   #+BEGIN_SRC haskell :tangle "./src/io_instance.hs"
instance Applicative IO where
  pure  = return
  (<*>) = ap
   #+END_SRC

   So our function ~sequence~ becomes:

   #+BEGIN_SRC haskell :tangle "./src/sequence_ap.hs"
sequence :: [IO a] -> IO [a]
sequence []     = pure []
sequence (c:cs) = pure (:) <*> c <*> (sequence cs)
   #+END_SRC

   and

   #+BEGIN_SRC haskell :tangle "./src/transpose_ap.hs"
transpose :: [[a]] -> [[a]]
transpose []       = pure []
transpose (xs:xss) = pure (:) <*> xs <*> (transpose xss)
   #+END_SRC

   If we implement ~transpose~ like this, with the default instance of
   ~Applicative []~ , our transpose function will not work. The
   same way we can have various instances of ~Monoid~ for a type, we
   can have various instances of ~Applicative~. For this example, we
   will need the ~Applicative ZipList~ instance instead, from
   ~Control.Applicative~, because we need an instance that supports
   "vectorisation". Our instance would be something like this:

   #+BEGIN_SRC haskell :tangle "./src/ListInstance.hs"
instance Applicative [] where
  pure  = repeat
  (<*>) = zapp
   #+END_SRC

   It also can be notice that ~repeat~ and ~zapp~ are not the
   equivalent ~return~ and ~ap~ of any ~Monad~.

*** Laws
    #+BEGIN_SRC text :tangle "./src/laws.txt"
identity                   pure id <*> u = u
composition   pure (.) <*> u <*> v <*> w = u <*> (v <*> w)
homomorphism           pure f <*> pure x = pure (f x)
interchange                 u <*> pure x = pure (\f -> f x) <*> u
    #+END_SRC

*** QuickCheck
    To make easier the checking process of this properties in our
    ~Applicative~ instances we have a ~QuickCheck~ library that help
    us with this work. This library is called ~Checkers~ and in order
    to use it we must define two instances:

    #+BEGIN_SRC haskell :tangle "./src/ArbitraryEqClass.hs"
class Arbitrary a where
  arbitrary :: Gen a

class EqProp a where
  (=-=) :: a -> a -> Property
    #+END_SRC

    once this instances are implemented, you just have to call the
    function ~quickBatch~ with a trigger data (which is not going to be
    evaluated). Example:

    #+BEGIN_SRC haskell :tangle "./src/trigger.hs"
trigger = undefined :: Pair (String, Int, Bool)

main :: IO ()
main = do
  quickBatch $ applicative trigger
    #+END_SRC

    #+BEGIN_SRC text :tangle "./src/testOut.txt"
applicative:
  identity:     +++ OK, passed 500 tests.
  composition:  +++ OK, passed 500 tests.
  homomorphism: +++ OK, passed 500 tests.
  interchange:  +++ OK, passed 500 tests.
  functor:      +++ OK, passed 500 tests.
    #+END_SRC

    As you can tell in the above example before calling the
    ~quickBatch~ function, we use the ~applicative~ function (located
    in ~QuickCheck.Classes~) so the testing function knows what kind
    of test we can perform. We can also use this library to test the
    laws of our ~Monoids~, ~Functors~ and ~Monads~.

** Traversing data structures

   If we take a look again at ~sequence~ and ~transpose~ and their
   types:

   #+BEGIN_SRC haskell :tangle "./src/trav_typ.hs"
sequence :: [IO a] -> IO [a]

transpose :: [[a]] -> [[a]]
   #+END_SRC

   we find a common pattern, this is what we call the /applicative
   distributor/ for lists:

   #+BEGIN_SRC haskell :tangle "./src/dist.hs"
dist :: Applicative => [f a] -> f [a]
dist []     = pure []
dist (v:vs) = pure (:) <*> v <*> (dist vs)
   #+END_SRC

   that is again the same we have in our /applicative style/
   implementation of the ~transpose~ and ~sequence~ functions. This
   ~dist~ function is usually used with 'map', for example here we use
   it for 'failure-propagation' over a list of inputs:

   #+BEGIN_SRC haskell :tangle "./src/flakyMap.hs"
flakyMap :: (a -> Maybe b) -> [a] -> Maybe [b]
flakyMap f ss = dist (fmap f ss)
   #+END_SRC

   A more general version of this function that only applies ~f~ once
   is:

   #+BEGIN_SRC haskell :tangle "./src/traverse.hs"
traverse :: Applicative f => (a -> f b) -> [a] -> f [b]
traverse f []     = pure []
traverse f (x:xs) = pure (:) <*> (f x) <*> (traverse f xs)
   #+END_SRC

   This general pattern is very useful not only for lists, but also
   for other kind of data structures so lets take a look at the
   ~Traversable~ type class, that will work like an ~fmap~, capturing
   functorial data structures, and apply an applicative computation.

   #+BEGIN_SRC haskell :tangle "./src/traversable.hs"
class Traversable t where
  traverse :: Applicative f => (a -> f b) -> t a -> f (t b)
  dist     :: Applicative f => t (f a) -> f (t b)
  dist     = traverse id
   #+END_SRC

   If we define an ~Id~ functor we can implement the ~fmap~ function
   with the ~Traversable~ type class.

   #+BEGIN_SRC haskell :tangle "./src/traversable_fmap.hs"
fmap f = an . traverse (An . f)
   #+END_SRC

   where the ~Id~ type would be something like:

   #+BEGIN_SRC haskell :tangle "./src/Id.hs"
newtype Id a = An { an :: a }
   #+END_SRC

   dist-like operators can be defined for regular functors which their
   datatype constructors has one parameter, constructed by recursive
   sums of products. Another example of ~Traversable~ functor is
   ~Tree~:

   #+BEGIN_SRC haskell :tangle "./src/Traversable_tree.hs"
data Tree a = Leaf | Node (Tree a) a (Tree a)

instance Traversable Tree where
  traverse f Leaf         = pure Leaf
  traverse f (Node l x r) = pure Node <*> (traverse f l) <*> (f x) <*> (traverse f r)
   #+END_SRC

   In order to have a ~Traversable Tree~ instance working, we need
   to implement the ~Functor~, ~Applicative~, and now also ~Foldable~
   instances for ~Tree a~.

** Monoids are phantom Applicative functors

   The ~Monoid~ class is just:

   #+BEGIN_SRC haskell :tangle "./src/Monoid.hs"
class Monoid o where
  mempty :: o
  (<>)   :: o -> o -> o -- also called "mappend"
   #+END_SRC

   As we all know, the functional programming world is full with
   monoids, numeric types, lists, booleans... Every monoid also
   induces an applicative functor, but in a particular way:

   #+BEGIN_SRC haskell :tangle "./src/Accy.hs"
newtype Accy o a = Acc { acc :: o }
   #+END_SRC

   So if we have a monoid that can have that structure, this can lead
   to an applicative functor that accumulates computations:

   #+BEGIN_SRC haskell :tangle "./src/Monoid_applicative.hs"
instance Monoid o => Applicative (Accy o) where
  pure _              = Acc mempty
  (Acc x) <*> (Acc y) = Acc (x <> y)
   #+END_SRC

   This accumulation can be seen as just a special kind of traversal:

   #+BEGIN_SRC haskell :tangle "./src/acc_red.hs"
accumulate :: (Traversable t, Monoid o) => (a -> o) -> t a -> o
accumulate f = acc . traverse (Acc . f)

reduce :: (Traversable t, Monoid o) => t o -> o
reduce = accumulate id
   #+END_SRC

   With this monoid instance we get operations as ~flatten~ and
   ~concat~ nearly for free!

   #+BEGIN_SRC haskell :tangle "./src/flatten_concat_monoid.hs"
flatten :: Tree a -> [a]    -- our Tree data type will need a
flatten = accumulate (:[])  -- Monoid and Traversable instance

concat :: [[a]] -> [a]      -- the same for our list
concat = reduce
   #+END_SRC

** Applicative versus Monad?

   As we have seen before, every ~Monad~ can be made ~Applicative~
   with the ~return~ and ~ap~ functions, as we see with the ~IO~
   example. However the list applicative we have defined is not
   monadic.

   So we know that we have more ~Applicative~ functors than ~Monads~

   This does not mean that we have to forget about monads, there are
   few of them because they are a more concrete structure so they are
   still more powerful.

   we can see that the bind operator:

   #+BEGIN_SRC haskell :tangle "./src/bind.hs"
(>>=) :: ma -> (a m b) -> m b
   #+END_SRC

   can have an effect on the next computation, whereas ~<*>~ just keep
   the computation fixed, sequencing effects.

   Let's take a look at an example:

   #+BEGIN_SRC haskell :tangle "./src/miffy_monad.hs"
miffy :: Monad m => m Bool -> m a -> m a -> m a
miffy mb mt me = do
  b <- mb
  if b then mt else me
   #+END_SRC

   #+BEGIN_SRC haskell :tangle "./src/iffy_ap.hs"
iffy :: Applicative f => f Bool -> f a -> f a -> f a
iffy fb ft fe = pure cond <*> fb <*> ft <*> fe
  where cond b t e = if b then t else e
   #+END_SRC

   The difference between this examples is that the ~Monad~ one
   sequence its effects while the ~Applicative~ one does not.

   The problem of this is that if we call the functions with:

   #+BEGIN_SRC text :tangle "./src/iffy.txt"
iffy (pure True) (pure t) Nothing = Nothing

miffy (return True) (return t) Nothing = return t
   #+END_SRC

   The difference is that the ~Monad~ implementation choose
   computations and performs only one of them, while the ~Applicative~
   performs all the effects and then chooses a value.

*** Composing applicative functors

    ~Applicative~ functors are easier to compose than ~Monads~.

    #+BEGIN_SRC haskell :tangle "./src/composition.hs"
newtype (f :.: g) a = Comp { comp :: (f (g a))}

instance (Applicative f, Applicative g) =>
                             Applicative (f :.: g) where
  pure x                  = Comp pure <*> (pure x)
  (Comp fs) <*> (Comp xs) = Comp pure (<*>) fs xs
    #+END_SRC

    So the composition of two applicatives is also an
    aplicative. While this does not happen with Monads, what we
    certainly get is, if we compose two monads we get at least an
    ~Applicative~.

*** Accumulating exceptions

    We will define a type to model exceptions:

    #+BEGIN_SRC haskell :tangle "./src/Except.hs"
data Except err a = OK a | Failed err
    #+END_SRC

    If we use a ~Monad~ instance for this, it will abort once the
    computation fails, however we can define the ~Applicative~
    instance as:

    #+BEGIN_SRC haskell :tangle "./src/ExceptApplicative.hs"
instance Monoid err => Applicative (Except err) where
  pure                           = OK
  (OK f) <*> (OK x)              = OK (f x)
  (OK f) <*> (Failed err)        = Failed err
  (Failed err) <*> (OK x)        = Failed err
  (Failed err) <*> (Failed err') = Failed (err <> err')
    #+END_SRC

    so in this way we can collect errors using the list monoid for
    example.

    # ** Applicative functors, categorically
** Conclusions

   We have identified ~Applicative~ functors. We saw that every
   ~Monad~ is also an ~Applicative~ functor.

   We also analysed the pattern that will give us the notion of how
   ~Applicative~ functors are created, and how to distinguish them in
   terms of types.

   We have seen ~Applicative~ functors laws the ~Checkers~ library to
   test our abstractions laws.

   We have made an abstraction over ~Applicative~ functors which is
   ~Traversable~ functors.

   We have defined monoids in terms of ~Applicative~ functors.

   We have compared them with ~Monads~.

** References

   - [[http://www.staff.city.ac.uk/~ross/papers/Applicative.html][Applicative programming with effects]]

   - [[http://haskellbook.com/][Haskell Book]]

   - [[https://acmupm.es/][ACM UPM]]

   - [[https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/][Category Theory for Programmers]]
